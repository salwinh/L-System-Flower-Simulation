import random as rd

divergence_angle1 = 137.50
divergence_angle2 = 137.50
branching_angle = 18.95
elongation_rate = 1.120
width_increase = 1.5
leafduration = 5
leafold = 3 
scaling = 300
length = 1
dl = 0.1
phi = 180
h = 0.01
      

def ran():
  return rd.randint(2, 2)
def ran_l():
  return rd.randint(30,50)
def ran_a():
  return rd.randint(15,45)

module A
module B
module F
module L
Axiom: !(1)F(150)/(45)A(0, 0)

derivation length: 8
production:
A(t, random):
    if t == 0 or random == 3:
      produce !(width_increase)F(ran_l())[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle1)[&(branching_angle)F(ran_l())A(t+1, ran())]/(divergence_angle2)[&(branching_angle)F(ran_l())A(t+1, ran())]B(0, t)
    elif random == 1:
      produce !(width_increase)F(ran_l())[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle1)[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle2)B(0, t)
    elif random == 2:
      produce !(width_increase)F(ran_l())[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle1)[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle2)B(0, t)
     
F(l) --> F(l*elongation_rate)
!(w) --> !(w*width_increase)

B(t, n):
  if t < leafduration:  produce F(h)/(phi)[^(-45)L(scaling, t)]B(t+1, n+1)
  else:   produce *
 
interpretation:
maximum depth: 2
L(x, t) :
    col = 1 if t >= leafold else 2
    produce ;(col)Sweep(nerve, section, length, dl, x, function)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	scalars = [('Left Branch', 'Category'), ('X', 'Float', 6.32, 0.0, 99.99, 2), ('Main Root Branch', 'Category'), ('Y', 'Float', 1.0, 0.0, 99.99, 2), ('Right Branch', 'Category'), ('Z', 'Float', 1.0, 0.0, 99.99, 2), ('Angle', 'Integer', 90, 0, 100)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	nerve = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.694427, -0.0211785, 1),(-0.460717, 0.0415956, 1),(0.582756, -0.0636219, 1),(0.979749, -0.00202243, 1)]) , 
	    )
	nerve.name = "nerve"
	section = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.247762, 0.650206, 1),(0.372782, 0.604059, 1),(-0.149977, -0.390408, 1),(-0.25636, 0.649343, 1)]) , 
	    )
	section.name = "section"
	import openalea.plantgl.all as pgl
	function = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, -0.177007, 1),(0.0577026, 0.174789, 1),(0.602514, 0.521866, 1),(1, -0.196758, 1)]) , 
	    )
	function.name = "function"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 1'},[('Curve2D',nerve),('Curve2D',section),('Function',function)])
	parameterset = [panel_0,]
	context["__functions__"] = [('function',function),]
	context["__curves__"] = [('nerve',nerve),('section',section),]
	context["__parameterset__"] = parameterset
	context["nerve"] = nerve
	context["section"] = section
	context["function"] = pgl.QuantisedFunction(function)
