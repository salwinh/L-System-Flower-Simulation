# THIS CODE IS A REAL MESS!! SORRY HUBI & KUBA.
# 
# 

import random

# Not sure, what is that exactly tbh
phi = 90
# Those are the angles between two 'sides' of branches
alpha = 30
beta  = 20
# Step per iteration, we can consider this as a unit of the time
step = 0.1
#stepleaf = 0.02 # not used right now, but could be useful

# From Palubicki's example - length is an argument in Sweep function, as well as dl
length = 1
dl = 0.1

# self-explanatory. We can even improve the proccess of growth of the trunk to make it more natural!
maximum_trunk_height = 3

# We start with 0.3 thickness and A (1.0)
Axiom: _(0.3)A(1.0)

# 360 was chosen by trial and errors method, not making much sense I guess
derivation length: 600
production:
A(k) :
    # pl - Probably some kind of probability. Check out random-tree example from examples/tutorials, l-py directory. I removed the random factor to make tree more symmetric.
    # Commented out lines are also from that example, just compare them
    
    #p1 = min(1,(2*k+1)/k**2)
    #r = random.random()
    
    # After reaching 11 steps, don't grow tree further! From now, we are just aging the leaves (probably good thinking?)
    if k <= 10:
      # If we haven't reached the maximum trunk height, we aren't producing any branches!
      if k <= maximum_trunk_height:
          produce SetColor(0)F(k+1)A(k+1)
      else: # elif r <= p1:
          produce /(phi)[+(alpha)C(0.1,k)k(k)]-(beta)C(step,k)
      #else:
      #    produce /(phi)[+(alpha)C(0.1, k);k(k)]-(beta)C(0.1,k)
    else:
      # Just a dummy production to make sure that simulation doesn't stop, when nothing happens. Not sure, if it's needed - sometimes leaves didn't age properly without it, or maybe there was 
      # another mistake?
      produce f(0.01)

# Whole module from random-tree. It produces some kind of branch with random thickness (?) and based on the iteration chooses whether it should produce more branches (A module?) or not.
C(x,k) :
    if x >= 1:
        if k < 19:
            produce F(1,0.05+0.25/k)A(k+1)
        else:
            produce F(1,0.05+0.25/k)
    else:
        produce C(x+step,k)

# Basically what it says is that in every step we age leaf by 0.5, maybe we can play with this factor
k(s):
  produce k(s+1)
    

homomorphism:

# Not sure what is that lol, probably randomizing the diameter of branch or something like this
C(x,k):
    d = 1
    if k > 1:
        d = 0.05+0.25* ((x/k)+(1-x)/(k-1))
    else:
        d = (0.3*(1-x))+((0.05+0.25/k)*x)
    produce F(x, d)

# This is how the leaves are interpreted!
k(s):
  if s <= 60:
    produce ;(1)Sweep(nerve, section, length, dl, 0.5, x)
  elif 60 < s <= 70:
    produce ;(2)Sweep(nerve, section, length, dl, 0.5, x)
  elif 70 < s <= 80:
    produce ;(3)Sweep(nerve, section, length, dl, 0.5, x)
  elif 80 < s <= 90:
    produce ;(4)Sweep(nerve, section, length, dl, 0.5, x)
  elif 90 < s <= 100:
    produce ;(5)Sweep(nerve, section, length, dl, 0.5, x)
  elif 100 < s <= 110:
    produce ;(6)Sweep(nerve, section, length, dl, 0.5, x)
  elif 110 < s <= 120:
    produce ;(7)Sweep(nerve, section, length, dl, 0.5, x)
  elif 120 < s <= 130:
    produce ;(8)Sweep(nerve, section, length, dl, 0.5, x)
  elif 130 < s <= 140:
    produce ;(9)Sweep(nerve, section, length, dl, 0.5, x)
  elif 140 < s <= 150:
    produce ;(10)Sweep(nerve, section, length, dl, 0.5, x)
  elif 150 < s <= 160:
    produce ;(11)Sweep(nerve, section, length, dl, 0.5, x)
  elif 160 < s <= 170:
    produce ;(12)Sweep(nerve, section, length, dl, 0.5, x)
  elif 170 < s < 240:
    produce ;(12)Sweep(nerve, section, length, dl, 0.5, x)
  elif 240 <= s <= 270:
    produce ;(12)Sweep(nerve, section, length, dl, 0.2, x)
  elif s >= 350:
    produce ;(24)@O(s / 7000)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_0 = pgl.Material("Color_0" , ambient = (47,32,10) , diffuse = 3.48936 , )
	Color_0.name = "Color_0"
	context.turtle.setMaterial(0,Color_0)
	Color_1 = pgl.Material("Color_1" , ambient = (32,55,9) , diffuse = 3.00741 , )
	Color_1.name = "Color_1"
	context.turtle.setMaterial(1,Color_1)
	Color_2 = pgl.Material("Color_2" , ambient = (34,49,8) , diffuse = 3.01483 , )
	Color_2.name = "Color_2"
	context.turtle.setMaterial(2,Color_2)
	Color_3 = pgl.Material("Color_3" , ambient = (37,45,7) , diffuse = 3.02224 , )
	Color_3.name = "Color_3"
	context.turtle.setMaterial(3,Color_3)
	Color_4 = pgl.Material("Color_4" , ambient = (39,40,6) , diffuse = 3.02966 , )
	Color_4.name = "Color_4"
	context.turtle.setMaterial(4,Color_4)
	Color_5 = pgl.Material("Color_5" , ambient = (42,35,5) , diffuse = 3.03707 , )
	Color_5.name = "Color_5"
	context.turtle.setMaterial(5,Color_5)
	Color_6 = pgl.Material("Color_6" , ambient = (44,29,5) , diffuse = 3.04449 , )
	Color_6.name = "Color_6"
	context.turtle.setMaterial(6,Color_6)
	Color_7 = pgl.Material("Color_7" , ambient = (47,24,4) , diffuse = 3.0519 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	Color_8 = pgl.Material("Color_8" , ambient = (49,19,3) , diffuse = 3.05932 , )
	Color_8.name = "Color_8"
	context.turtle.setMaterial(8,Color_8)
	Color_9 = pgl.Material("Color_9" , ambient = (52,14,2) , diffuse = 3.06673 , )
	Color_9.name = "Color_9"
	context.turtle.setMaterial(9,Color_9)
	Color_10 = pgl.Material("Color_10" , ambient = (57,5,1) , diffuse = 3.08156 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (53,15,4) , diffuse = 3.24468 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	Color_12 = pgl.Material("Color_12" , ambient = (49,26,8) , diffuse = 3.4078 , )
	Color_12.name = "Color_12"
	context.turtle.setMaterial(12,Color_12)
	Color_13 = pgl.Material("Color_13" , ambient = (49,26,8) , diffuse = 3.4078 , )
	Color_13.name = "Color_13"
	context.turtle.setMaterial(13,Color_13)
	Color_20 = pgl.Material("Color_20" , ambient = (54,9,1) , diffuse = 3.07415 , )
	Color_20.name = "Color_20"
	context.turtle.setMaterial(20,Color_20)
	Color_24 = pgl.Material("Color_24" , ambient = (219,94,227) , diffuse = 0.60793 , )
	Color_24.name = "Color_24"
	context.turtle.setMaterial(24,Color_24)
	Color_32 = pgl.Material("Color_32" , ambient = (30,60,10) , diffuse = 3 , )
	Color_32.name = "Color_32"
	context.turtle.setMaterial(32,Color_32)
	import openalea.plantgl.all as pgl
	x = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0551126, 1),(0.389171, 1.43562, 1),(0.666667, 0, 1),(1, 0.130266, 1)]) , 
	    )
	x.name = "x"
	import openalea.plantgl.all as pgl
	nerve = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.172348, 0.300945, 1),(-0.434237, 0.522183, 1),(0.0519275, 0.477509, 1),(0.260689, 0.263963, 1),(0.375569, 0.00714368, 1)]) , 
	    )
	nerve.name = "nerve"
	section = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(1.70909, -0.313636, 1),(-1.11667, 0.395454, 1),(0.30303, 0.940909, 1),(0.813636, 0.168182, 1)]) , 
	    )
	section.name = "section"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 1'},[('Function',x),('Curve2D',nerve),('Curve2D',section)])
	parameterset = [panel_0,]
	context["__functions__"] = [('x',x),]
	context["__curves__"] = [('nerve',nerve),('section',section),]
	context["__parameterset__"] = parameterset
	context["x"] = pgl.QuantisedFunction(x)
	context["nerve"] = nerve
	context["section"] = section
