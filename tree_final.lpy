# THIS CODE IS A REAL MESS!! SORRY HUBI & KUBA.
# 
# 

import random as rd

# Not sure, what is that exactly tbh
phi = 90
# Those are the angles between two 'sides' of branches
alpha = 30
beta  = 20
# Step per iteration, we can consider this as a unit of the time
step = 0.1
#stepleaf = 0.02 # not used right now, but could be useful

# From Palubicki's example - length is an argument in Sweep function, as well as dl
length = 1
dl = 0.05

# self-explanatory. We can even improve the proccess of growth of the trunk to make it more natural!
maximum_trunk_height = 3

def outer_branch_length():
  return rd.uniform(2.8, 3.2)
def random_alpha():
  return rd.randint(27, 33)
def random_beta():
  return rd.randint(17, 23)
def random_leaf_angle():
  return rd.randint(-125,-125)
def random_leaf_pitch():
  return rd.randint(250,250)

# We start with 0.3 thickness and A (1.0)
Axiom: _(0.3)A(1.0)

# 360 was chosen by trial and errors method, not making much sense I guess
derivation length: 360
production:  
A(k) :
    # pl - Probably some kind of probability. Check out random-tree example from examples/tutorials, l-py directory. I removed the random factor to make tree more symmetric.
    # Commented out lines are also from that example, just compare them
    
    #p1 = min(1,(2*k+1)/k**2)
    #r = random.random()
    
    # After reaching 11 steps, don't grow tree further! From now, we are just aging the leaves (probably good thinking?)
    if k <= 10:
      # If we haven't reached the maximum trunk height, we aren't producing any branches!
      if k <= maximum_trunk_height:
          produce F(k+1)A(k+1)
      else: # elif r <= p1:
          produce /(phi)[+(random_alpha())C(0.1,k);k(k)]-(random_beta())C(step,k)
      #else:
      #    produce /(phi)[+(alpha)C(0.1, k);k(k)]-(beta)C(0.1,k)
    else:
      # Just a dummy production to make sure that simulation doesn't stop, when nothing happens. Not sure, if it's needed - sometimes leaves didn't age properly without it, or maybe there was 
      # another mistake?
      produce f(0.01)

# Whole module from random-tree. It produces some kind of branch with random thickness (?) and based on the iteration chooses whether it should produce more branches (A module?) or not.
C(x,k) :
    if x >= 1:
        if k <= 9:
            produce F(1,0.05+0.25/k)A(k+1)
        else: # outer branch divided in 4 parts
            produce F(outer_branch_length()/4,0.04+0.25/k)[+(random_leaf_angle())&(random_leaf_angle())k(5)]F(outer_branch_length()/4,0.03+0.20/k)[-(random_leaf_angle())&(random_leaf_pitch())k(5)]F(outer_branch_length()/4,0.02+0.15/k)[+(random_leaf_angle())&(random_leaf_angle())k(5)]F(outer_branch_length()/4,0.01+0.10/k)[-(random_leaf_angle())&(random_leaf_pitch())k(5)]
            
    else:
        produce C(x+step,k)

# Basically what it says is that in every step we age leaf by 0.5, maybe we can play with this factor
k(s):
  produce k(s+0.5)
    

homomorphism:

# Not sure what is that lol, probably randomizing the diameter of branch or something like this
C(x,k):
    d = 1
    if k > 1:
        d = 0.05+0.25* ((x/k)+(1-x)/(k-1))
    else:
        d = (0.3*(1-x))+((0.05+0.25/k)*x)
    produce F(x, d)

# This is how the leaves are interpreted!
k(s):
  colors = [1, 3, 4]
  if s <= 120:
    # green
    produce ;(2)Sweep(nerve, section_2, length, dl, 0.5, leafwidth)
  elif s > 120 and s < 130:
    # red
    produce ;(3)Sweep(nerve, section_2, length, dl, 0.5, leafwidth)
  elif s >= 130 and s < 150:
    # orange
    produce ;(4)Sweep(nerve, section_2, length, dl, 0.5, leafwidth)
  else:
    # die!
    produce
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	x = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0551126, 1),(0.389171, 1.43562, 1),(0.666667, 0, 1),(1, 0.130266, 1)]) , 
	    )
	x.name = "x"
	import openalea.plantgl.all as pgl
	nerve = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.172348, 0.300945, 1),(-0.434237, 0.522183, 1),(0.0519275, 0.477509, 1),(0.260689, 0.263963, 1),(0.375569, 0.00714368, 1)]) , 
	    )
	nerve.name = "nerve"
	section = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(1.70909, -0.313636, 1),(-1.11667, 0.395454, 1),(0.30303, 0.940909, 1),(0.813636, 0.168182, 1)]) , 
	    )
	section.name = "section"
	leafwidth = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0235343, 1),(0.259933, -0.0462347, 1),(0.259933, 0.90062, 1),(0.287462, 0.712806, 1),(0.324502, 1.04315, 1),(0.372678, 0.795394, 1),(0.37956, 1.21521, 1),(0.455265, 0.926157, 1),(0.462148, 1.24962, 1),(0.558499, 0.891745, 1),(0.558499, 1.21521, 1),(0.618412, 0.863182, 1),(0.627322, 1.11886, 1),(0.689262, 0.81604, 1),(0.689262, 0.96745, 1),(0.709909, 0.69216, 1),(0.74432, 0.809158, 1),(0.764967, 0.582043, 1),(0.764967, 0.705924, 1),(0.806261, 0.471927, 1),(0.847554, 0.478809, 1),(0.847554, 0.375576, 1),(0.886821, 0.33416, 1),(0.902612, 0.169108, 1),(0.916377, 0.224166, 1),(1, 0.0137645, 1)]) , 
	    )
	leafwidth.name = "leafwidth"
	section_2 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.503574, 0.082053, 1),(-0.172505, -0.105009, 1),(0.00540459, 0.185936, 1),(0.182474, -0.116487, 1),(0.572084, 0.0925785, 1)]) , 
	    )
	section_2.name = "section_2"
	path = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.0761548, 0.0847519, 1),(0.0920954, -0.127235, 1),(0.5, 0, 1)]) , 
	    )
	path.name = "path"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 1'},[('Function',x),('Curve2D',nerve),('Curve2D',section),('Function',leafwidth),('Curve2D',section_2),('Curve2D',path)])
	parameterset = [panel_0,]
	context["__functions__"] = [('x',x),('leafwidth',leafwidth),]
	context["__curves__"] = [('nerve',nerve),('section',section),('section_2',section_2),('path',path),]
	context["__parameterset__"] = parameterset
	context["x"] = pgl.QuantisedFunction(x)
	context["nerve"] = nerve
	context["section"] = section
	context["leafwidth"] = pgl.QuantisedFunction(leafwidth)
	context["section_2"] = section_2
	context["path"] = path
