import random as rd
 
divergence_angle1 = 137.5
divergence_angle2 = 137.5
branching_angle = 18.95
elongation_rate = 1.1
width_increase = 1.5
leaf_maturation = 30
 
Axiom: !(1)F(150)/(45)A(0, 0)
 
def max_leaf_size(s, maxs):
  return ((maxs - s) * 0.5 / float(maxs) + 0.5)
 
def leaf_size(max_leaf_size, t):
  age = leafduration - t
  if age < leafmaturation:
    return max_leaf_size * ((age * 0.5 / float(leaf_maturation)) + 0.5)
  else:
      return max_leaf_size
     
def ran():
  return rd.randint(2, 2)
def ran_l():
  return rd.randint(30,50)
def ran_a():
  return rd.randint(15,45)
 
derivation length: 8
production:

A(t, random):
    if t == 0 or random == 3:
      produce !(width_increase)F(ran_l())[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle1)[&(branching_angle)F(ran_l())A(t+1, ran())]/(divergence_angle2)[&(branching_angle)F(ran_l())A(t+1, ran())]
    elif random == 1:
      produce !(width_increase)F(ran_l())[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle1)[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle2)   
    elif random == 2:
      produce !(width_increase)F(ran_l())[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle1)[&(ran_a())F(ran_l())A(t+1, ran())]/(divergence_angle2)      
 
F(l) --> F(l*elongation_rate)
!(w) --> !(w*width_increase)
 
endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	scalars = [('Left Branch', 'Category'), ('X', 'Float', 6.32, 0.0, 99.99, 2), ('Main Root Branch', 'Category'), ('Y', 'Float', 1.0, 0.0, 99.99, 2), ('Right Branch', 'Category'), ('Z', 'Float', 1.0, 0.0, 99.99, 2), ('Angle', 'Integer', 90, 0, 100)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
